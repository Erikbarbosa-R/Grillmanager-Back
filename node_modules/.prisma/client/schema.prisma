// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  image       String?
  popular     Boolean  @default(false)
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Restaurant {
  id                String   @id @default(cuid())
  name              String
  description       String?
  address           Json? // Estrutura completa do endereço
  contact           Json? // Informações de contato
  deliverySettings  Json? // Configurações de delivery
  operatingHours    Json? // Horários de funcionamento
  isOpen            Boolean  @default(true)
  estimatedPrepTime String   @default("25-35 min")
  logo              String?
  primaryColor      String   @default("#f97316")
  secondaryColor    String   @default("#ea580c")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("restaurant")
}

model Order {
  id              String      @id @default(cuid())
  orderId         String      @unique // ID legível (ex: ORD-20241215-001)
  items           Json // Array de itens do pedido
  customer        Json // Dados do cliente
  deliveryAddress Json // Endereço de entrega
  payment         Json // Informações de pagamento
  delivery        Json // Informações de delivery
  totals          Json // Totais do pedido
  notes           String?
  status          OrderStatus @default(PENDING)
  timeline        Json? // Histórico de status
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  method        String // pix, dinheiro, credito, debito
  status        PaymentStatus @default(PENDING)
  amount        Float
  pixCode       String?
  qrCode        String?
  transactionId String?
  paidAt        DateTime?
  expiresAt     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
  CANCELLED
}
